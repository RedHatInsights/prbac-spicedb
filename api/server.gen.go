// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ListOrgAdminsParamsType.
const (
	AccountId ListOrgAdminsParamsType = "account_id"
	OrgId     ListOrgAdminsParamsType = "org_id"
)

// Defines values for ListGroupsParamsOrderBy.
const (
	ListGroupsParamsOrderByModified ListGroupsParamsOrderBy = "modified"
	ListGroupsParamsOrderByName     ListGroupsParamsOrderBy = "name"
)

// Defines values for ListPrincipalsForGroupParamsOrderBy.
const (
	Username ListPrincipalsForGroupParamsOrderBy = "username"
)

// Defines values for ListPrincipalsForGroupParamsUsernameOnly.
const (
	False ListPrincipalsForGroupParamsUsernameOnly = false
	True  ListPrincipalsForGroupParamsUsernameOnly = true
)

// Defines values for ListRolesForGroupParamsOrderBy.
const (
	ListRolesForGroupParamsOrderByModified ListRolesForGroupParamsOrderBy = "modified"
	ListRolesForGroupParamsOrderByName     ListRolesForGroupParamsOrderBy = "name"
)

// Defines values for ListGroupsForPrincipalParamsOrderBy.
const (
	ListGroupsForPrincipalParamsOrderByModified ListGroupsForPrincipalParamsOrderBy = "modified"
	ListGroupsForPrincipalParamsOrderByName     ListGroupsForPrincipalParamsOrderBy = "name"
)

// Defines values for ListRolesForGroupsForPrincipalParamsOrderBy.
const (
	ListRolesForGroupsForPrincipalParamsOrderByModified ListRolesForGroupsForPrincipalParamsOrderBy = "modified"
	ListRolesForGroupsForPrincipalParamsOrderByName     ListRolesForGroupsForPrincipalParamsOrderBy = "name"
)

// Defines values for ListRoleParamsNameMatch.
const (
	Exact   ListRoleParamsNameMatch = "exact"
	Partial ListRoleParamsNameMatch = "partial"
)

// Defines values for ListRoleParamsScope.
const (
	ListRoleParamsScopeAccount   ListRoleParamsScope = "account"
	ListRoleParamsScopePrincipal ListRoleParamsScope = "principal"
)

// Defines values for ListRoleParamsOrderBy.
const (
	DisplayName ListRoleParamsOrderBy = "display_name"
	Modified    ListRoleParamsOrderBy = "modified"
	Name        ListRoleParamsOrderBy = "name"
	PolicyCount ListRoleParamsOrderBy = "policyCount"
)

// Defines values for ListRoleParamsAddFields.
const (
	GroupsIn      ListRoleParamsAddFields = "groups_in"
	GroupsInCount ListRoleParamsAddFields = "groups_in_count"
)

// Error defines model for Error.
type Error struct {
	Errors []struct {
		Detail *string `json:"detail,omitempty"`
		Status *string `json:"status,omitempty"`
	} `json:"errors"`
}

// Error403 defines model for Error403.
type Error403 struct {
	Errors []struct {
		Detail *string `json:"detail,omitempty"`
		Source *string `json:"source,omitempty"`
		Status *string `json:"status,omitempty"`
	} `json:"errors"`
}

// Group defines model for Group.
type Group struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// GroupOut defines model for GroupOut.
type GroupOut struct {
	AdminDefault    *bool              `json:"admin_default,omitempty"`
	Created         time.Time          `json:"created"`
	Description     *string            `json:"description,omitempty"`
	Modified        time.Time          `json:"modified"`
	Name            string             `json:"name"`
	PlatformDefault *bool              `json:"platform_default,omitempty"`
	PrincipalCount  *int               `json:"principalCount,omitempty"`
	RoleCount       *int               `json:"roleCount,omitempty"`
	System          *bool              `json:"system,omitempty"`
	Uuid            openapi_types.UUID `json:"uuid"`
}

// GroupPagination defines model for GroupPagination.
type GroupPagination struct {
	Data  []GroupOut       `json:"data"`
	Links *PaginationLinks `json:"links,omitempty"`
	Meta  *PaginationMeta  `json:"meta,omitempty"`
}

// ListPagination defines model for ListPagination.
type ListPagination struct {
	Links *PaginationLinks `json:"links,omitempty"`
	Meta  *PaginationMeta  `json:"meta,omitempty"`
}

// OrgAdmin defines model for OrgAdmin.
type OrgAdmin struct {
	Email      *string `json:"email,omitempty"`
	FirstName  *string `json:"first_name,omitempty"`
	Id         *int    `json:"id,omitempty"`
	IsActive   *bool   `json:"is_active,omitempty"`
	IsInternal *bool   `json:"is_internal,omitempty"`
	IsOrgAdmin *bool   `json:"is_org_admin,omitempty"`
	LastName   *string `json:"last_name,omitempty"`
	Locale     *string `json:"locale,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// OrgAdminPagination defines model for OrgAdminPagination.
type OrgAdminPagination struct {
	Data  []OrgAdmin       `json:"data"`
	Links *PaginationLinks `json:"links,omitempty"`
	Meta  *PaginationMeta  `json:"meta,omitempty"`
}

// PaginationLinks defines model for PaginationLinks.
type PaginationLinks struct {
	First    *string `json:"first,omitempty"`
	Last     *string `json:"last,omitempty"`
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
}

// PaginationMeta defines model for PaginationMeta.
type PaginationMeta struct {
	Count *int64 `json:"count,omitempty"`
}

// Principal defines model for Principal.
type Principal struct {
	Email      openapi_types.Email `json:"email"`
	FirstName  *string             `json:"first_name,omitempty"`
	IsActive   *bool               `json:"is_active,omitempty"`
	IsOrgAdmin *bool               `json:"is_org_admin,omitempty"`
	LastName   *string             `json:"last_name,omitempty"`
	Username   string              `json:"username"`
}

// PrincipalMinimal defines model for PrincipalMinimal.
type PrincipalMinimal struct {
	Username string `json:"username"`
}

// PrincipalPagination defines model for PrincipalPagination.
type PrincipalPagination struct {
	Data  []PrincipalPagination_Data_Item `json:"data"`
	Links *PaginationLinks                `json:"links,omitempty"`
	Meta  *PaginationMeta                 `json:"meta,omitempty"`
}

// PrincipalPagination_Data_Item defines model for PrincipalPagination.data.Item.
type PrincipalPagination_Data_Item struct {
	union json.RawMessage
}

// Role defines model for Role.
type Role struct {
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Name        string  `json:"name"`
}

// RoleOut defines model for RoleOut.
type RoleOut struct {
	AccessCount     *int               `json:"accessCount,omitempty"`
	AdminDefault    *bool              `json:"admin_default,omitempty"`
	Applications    *[]string          `json:"applications,omitempty"`
	Created         time.Time          `json:"created"`
	Description     *string            `json:"description,omitempty"`
	DisplayName     *string            `json:"display_name,omitempty"`
	Modified        time.Time          `json:"modified"`
	Name            string             `json:"name"`
	PlatformDefault *bool              `json:"platform_default,omitempty"`
	PolicyCount     *int               `json:"policyCount,omitempty"`
	System          *bool              `json:"system,omitempty"`
	Uuid            openapi_types.UUID `json:"uuid"`
}

// RolePagination defines model for RolePagination.
type RolePagination struct {
	Data  []RoleOut        `json:"data"`
	Links *PaginationLinks `json:"links,omitempty"`
	Meta  *PaginationMeta  `json:"meta,omitempty"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	AccountId *int `json:"account_id,omitempty"`
	Id        *int `json:"id,omitempty"`
	OrgId     *int `json:"org_id,omitempty"`
}

// TenantPagination defines model for TenantPagination.
type TenantPagination struct {
	Data  []Tenant         `json:"data"`
	Links *PaginationLinks `json:"links,omitempty"`
	Meta  *PaginationMeta  `json:"meta,omitempty"`
}

// Timestamped defines model for Timestamped.
type Timestamped struct {
	Created  time.Time `json:"created"`
	Modified time.Time `json:"modified"`
}

// UUID defines model for UUID.
type UUID struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

// QueryLimit defines model for QueryLimit.
type QueryLimit = int

// QueryOffset defines model for QueryOffset.
type QueryOffset = int

// ListOrgAdminsParams defines parameters for ListOrgAdmins.
type ListOrgAdminsParams struct {
	// Type Parameter for retrieving org admins based on account or org.
	Type ListOrgAdminsParamsType `form:"type" json:"type"`

	// Limit Parameter for selecting the amount of data returned.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Parameter for selecting the offset of data.
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListOrgAdminsParamsType defines parameters for ListOrgAdmins.
type ListOrgAdminsParamsType string

// ListTenantsParams defines parameters for ListTenants.
type ListTenantsParams struct {
	// ModifiedOnly Parameter for filtering tenants by those with group or role modifications.
	ModifiedOnly *bool `form:"modified_only,omitempty" json:"modified_only,omitempty"`

	// Limit Parameter for selecting the amount of data returned.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Parameter for selecting the offset of data.
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListGroupsParams defines parameters for ListGroups.
type ListGroupsParams struct {
	// Limit Parameter for selecting the amount of data returned.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Parameter for selecting the offset of data.
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Uuid A list of UUIDs to filter listed groups.
	Uuid *[]string `form:"uuid,omitempty" json:"uuid,omitempty"`

	// OrderBy Parameter for ordering groups by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-name
	OrderBy *ListGroupsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Username Optional parameter for filtering by username
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// System Parameter for filtering resource by system flag.
	System *bool `form:"system,omitempty" json:"system,omitempty"`
}

// ListGroupsParamsOrderBy defines parameters for ListGroups.
type ListGroupsParamsOrderBy string

// ListPrincipalsForGroupParams defines parameters for ListPrincipalsForGroup.
type ListPrincipalsForGroupParams struct {
	// PrincipalUsername Parameter for filtering group principals by principal `username` using string contains search.
	PrincipalUsername *string `form:"principal_username,omitempty" json:"principal_username,omitempty"`

	// Limit Parameter for selecting the amount of data returned.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Parameter for selecting the offset of data.
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Parameter for ordering principals by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-username
	OrderBy *ListPrincipalsForGroupParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// UsernameOnly Parameter for optionally returning only usernames for principals, bypassing a call to IT.
	UsernameOnly *ListPrincipalsForGroupParamsUsernameOnly `form:"username_only,omitempty" json:"username_only,omitempty"`
}

// ListPrincipalsForGroupParamsOrderBy defines parameters for ListPrincipalsForGroup.
type ListPrincipalsForGroupParamsOrderBy string

// ListPrincipalsForGroupParamsUsernameOnly defines parameters for ListPrincipalsForGroup.
type ListPrincipalsForGroupParamsUsernameOnly bool

// ListRolesForGroupParams defines parameters for ListRolesForGroup.
type ListRolesForGroupParams struct {
	// RoleName Parameter for filtering group roles by role `name` using string contains search.
	RoleName *string `form:"role_name,omitempty" json:"role_name,omitempty"`

	// RoleDescription Parameter for filtering group roles by role `description` using string contains search.
	RoleDescription *string `form:"role_description,omitempty" json:"role_description,omitempty"`

	// Limit Parameter for selecting the amount of data returned.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Parameter for selecting the offset of data.
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Parameter for ordering roles by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-name
	OrderBy *ListRolesForGroupParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// RoleExternalTenant Parameter for filtering group roles by role `external_tenant` using string search.
	RoleExternalTenant *string `form:"role_external_tenant,omitempty" json:"role_external_tenant,omitempty"`

	// Username Optional parameter for filtering by username
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// ListRolesForGroupParamsOrderBy defines parameters for ListRolesForGroup.
type ListRolesForGroupParamsOrderBy string

// ListGroupsForPrincipalParams defines parameters for ListGroupsForPrincipal.
type ListGroupsForPrincipalParams struct {
	// Limit Parameter for selecting the amount of data returned.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Parameter for selecting the offset of data.
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Uuid A list of UUIDs to filter listed groups.
	Uuid *[]string `form:"uuid,omitempty" json:"uuid,omitempty"`

	// OrderBy Parameter for ordering groups by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-name
	OrderBy *ListGroupsForPrincipalParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListGroupsForPrincipalParamsOrderBy defines parameters for ListGroupsForPrincipal.
type ListGroupsForPrincipalParamsOrderBy string

// ListRolesForGroupsForPrincipalParams defines parameters for ListRolesForGroupsForPrincipal.
type ListRolesForGroupsForPrincipalParams struct {
	// RoleName Parameter for filtering group roles by role `name` using string contains search.
	RoleName *string `form:"role_name,omitempty" json:"role_name,omitempty"`

	// Limit Parameter for selecting the amount of data returned.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Parameter for selecting the offset of data.
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Parameter for ordering roles by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-name
	OrderBy *ListRolesForGroupsForPrincipalParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListRolesForGroupsForPrincipalParamsOrderBy defines parameters for ListRolesForGroupsForPrincipal.
type ListRolesForGroupsForPrincipalParamsOrderBy string

// ListRoleParams defines parameters for ListRole.
type ListRoleParams struct {
	// Name Parameter for filtering roles by role `name` using string contains search.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// DisplayName Parameter for filtering resource by display_name using string contains search.
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty"`

	// System Parameter for filtering resource by system flag.
	System *bool `form:"system,omitempty" json:"system,omitempty"`

	// NameMatch Parameter for specifying the matching criteria for an object's name or display_name.
	NameMatch *ListRoleParamsNameMatch `form:"name_match,omitempty" json:"name_match,omitempty"`

	// Scope Parameter for filtering resource by scope.
	Scope *ListRoleParamsScope `form:"scope,omitempty" json:"scope,omitempty"`

	// Limit Parameter for selecting the amount of data returned.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Parameter for selecting the offset of data.
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Parameter for ordering roles by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-name
	OrderBy *ListRoleParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// AddFields Parameter for add list of fields to display for roles.
	AddFields *ListRoleParamsAddFields `form:"add_fields,omitempty" json:"add_fields,omitempty"`

	// Username Optional parameter for filtering by username
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Application The application name(s) to filter roles by, from permissions. This is an exact match. You may also use a comma-separated list to match on multiple applications.
	Application *string `form:"application,omitempty" json:"application,omitempty"`

	// Permission The permission(s) to filter roles by, from permissions. This is an exact match. You may also use a comma-separated list to match on multiple permissions.
	Permission *string `form:"permission,omitempty" json:"permission,omitempty"`

	// ExternalTenant Parameter for filtering roles by external tenant name using string search.
	ExternalTenant *string `form:"external_tenant,omitempty" json:"external_tenant,omitempty"`
}

// ListRoleParamsNameMatch defines parameters for ListRole.
type ListRoleParamsNameMatch string

// ListRoleParamsScope defines parameters for ListRole.
type ListRoleParamsScope string

// ListRoleParamsOrderBy defines parameters for ListRole.
type ListRoleParamsOrderBy string

// ListRoleParamsAddFields defines parameters for ListRole.
type ListRoleParamsAddFields string

// AsPrincipal returns the union data inside the PrincipalPagination_Data_Item as a Principal
func (t PrincipalPagination_Data_Item) AsPrincipal() (Principal, error) {
	var body Principal
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrincipal overwrites any union data inside the PrincipalPagination_Data_Item as the provided Principal
func (t *PrincipalPagination_Data_Item) FromPrincipal(v Principal) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrincipal performs a merge with any union data inside the PrincipalPagination_Data_Item, using the provided Principal
func (t *PrincipalPagination_Data_Item) MergePrincipal(v Principal) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPrincipalMinimal returns the union data inside the PrincipalPagination_Data_Item as a PrincipalMinimal
func (t PrincipalPagination_Data_Item) AsPrincipalMinimal() (PrincipalMinimal, error) {
	var body PrincipalMinimal
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrincipalMinimal overwrites any union data inside the PrincipalPagination_Data_Item as the provided PrincipalMinimal
func (t *PrincipalPagination_Data_Item) FromPrincipalMinimal(v PrincipalMinimal) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrincipalMinimal performs a merge with any union data inside the PrincipalPagination_Data_Item, using the provided PrincipalMinimal
func (t *PrincipalPagination_Data_Item) MergePrincipalMinimal(v PrincipalMinimal) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PrincipalPagination_Data_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PrincipalPagination_Data_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of Org Admins for an account or organization
	// (GET /api/utils/get_org_admin/{org_or_account}/)
	ListOrgAdmins(w http.ResponseWriter, r *http.Request, orgOrAccount string, params ListOrgAdminsParams)
	// Get a list of tenants
	// (GET /integrations/tenant/)
	ListTenants(w http.ResponseWriter, r *http.Request, params ListTenantsParams)
	// List the groups for a tenant
	// (GET /integrations/tenant/{orgId}/groups/)
	ListGroups(w http.ResponseWriter, r *http.Request, orgId string, params ListGroupsParams)
	// Get a list of principals from a group in a tenant
	// (GET /integrations/tenant/{orgId}/groups/{uuid}/principals/)
	ListPrincipalsForGroup(w http.ResponseWriter, r *http.Request, orgId string, uuid openapi_types.UUID, params ListPrincipalsForGroupParams)
	// List the roles for a group in a tenant
	// (GET /integrations/tenant/{orgId}/groups/{uuid}/roles/)
	ListRolesForGroup(w http.ResponseWriter, r *http.Request, orgId string, uuid openapi_types.UUID, params ListRolesForGroupParams)
	// List the groups for a principal in a tenant
	// (GET /integrations/tenant/{orgId}/principal/{username}/groups/)
	ListGroupsForPrincipal(w http.ResponseWriter, r *http.Request, orgId string, username string, params ListGroupsForPrincipalParams)
	// List the roles for a group for a principal in a tenant
	// (GET /integrations/tenant/{orgId}/principal/{username}/groups/{uuid}/roles/)
	ListRolesForGroupsForPrincipal(w http.ResponseWriter, r *http.Request, orgId string, username string, uuid openapi_types.UUID, params ListRolesForGroupsForPrincipalParams)
	// List the roles for a tenant
	// (GET /integrations/tenant/{orgId}/roles/)
	ListRole(w http.ResponseWriter, r *http.Request, orgId string, params ListRoleParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get a list of Org Admins for an account or organization
// (GET /api/utils/get_org_admin/{org_or_account}/)
func (_ Unimplemented) ListOrgAdmins(w http.ResponseWriter, r *http.Request, orgOrAccount string, params ListOrgAdminsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a list of tenants
// (GET /integrations/tenant/)
func (_ Unimplemented) ListTenants(w http.ResponseWriter, r *http.Request, params ListTenantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the groups for a tenant
// (GET /integrations/tenant/{orgId}/groups/)
func (_ Unimplemented) ListGroups(w http.ResponseWriter, r *http.Request, orgId string, params ListGroupsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a list of principals from a group in a tenant
// (GET /integrations/tenant/{orgId}/groups/{uuid}/principals/)
func (_ Unimplemented) ListPrincipalsForGroup(w http.ResponseWriter, r *http.Request, orgId string, uuid openapi_types.UUID, params ListPrincipalsForGroupParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the roles for a group in a tenant
// (GET /integrations/tenant/{orgId}/groups/{uuid}/roles/)
func (_ Unimplemented) ListRolesForGroup(w http.ResponseWriter, r *http.Request, orgId string, uuid openapi_types.UUID, params ListRolesForGroupParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the groups for a principal in a tenant
// (GET /integrations/tenant/{orgId}/principal/{username}/groups/)
func (_ Unimplemented) ListGroupsForPrincipal(w http.ResponseWriter, r *http.Request, orgId string, username string, params ListGroupsForPrincipalParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the roles for a group for a principal in a tenant
// (GET /integrations/tenant/{orgId}/principal/{username}/groups/{uuid}/roles/)
func (_ Unimplemented) ListRolesForGroupsForPrincipal(w http.ResponseWriter, r *http.Request, orgId string, username string, uuid openapi_types.UUID, params ListRolesForGroupsForPrincipalParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the roles for a tenant
// (GET /integrations/tenant/{orgId}/roles/)
func (_ Unimplemented) ListRole(w http.ResponseWriter, r *http.Request, orgId string, params ListRoleParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListOrgAdmins operation middleware
func (siw *ServerInterfaceWrapper) ListOrgAdmins(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "org_or_account" -------------
	var orgOrAccount string

	err = runtime.BindStyledParameterWithLocation("simple", false, "org_or_account", runtime.ParamLocationPath, chi.URLParam(r, "org_or_account"), &orgOrAccount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "org_or_account", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOrgAdminsParams

	// ------------- Required query parameter "type" -------------

	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListOrgAdmins(w, r, orgOrAccount, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTenantsParams

	// ------------- Optional query parameter "modified_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_only", r.URL.Query(), &params.ModifiedOnly)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "modified_only", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTenants(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGroups operation middleware
func (siw *ServerInterfaceWrapper) ListGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, chi.URLParam(r, "orgId"), &orgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", false, false, "uuid", r.URL.Query(), &params.Uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "system" -------------

	err = runtime.BindQueryParameter("form", true, false, "system", r.URL.Query(), &params.System)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "system", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGroups(w, r, orgId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPrincipalsForGroup operation middleware
func (siw *ServerInterfaceWrapper) ListPrincipalsForGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, chi.URLParam(r, "orgId"), &orgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPrincipalsForGroupParams

	// ------------- Optional query parameter "principal_username" -------------

	err = runtime.BindQueryParameter("form", true, false, "principal_username", r.URL.Query(), &params.PrincipalUsername)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "principal_username", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	// ------------- Optional query parameter "username_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "username_only", r.URL.Query(), &params.UsernameOnly)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username_only", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPrincipalsForGroup(w, r, orgId, uuid, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRolesForGroup operation middleware
func (siw *ServerInterfaceWrapper) ListRolesForGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, chi.URLParam(r, "orgId"), &orgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRolesForGroupParams

	// ------------- Optional query parameter "role_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "role_name", r.URL.Query(), &params.RoleName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_name", Err: err})
		return
	}

	// ------------- Optional query parameter "role_description" -------------

	err = runtime.BindQueryParameter("form", true, false, "role_description", r.URL.Query(), &params.RoleDescription)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_description", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	// ------------- Optional query parameter "role_external_tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "role_external_tenant", r.URL.Query(), &params.RoleExternalTenant)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_external_tenant", Err: err})
		return
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRolesForGroup(w, r, orgId, uuid, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGroupsForPrincipal operation middleware
func (siw *ServerInterfaceWrapper) ListGroupsForPrincipal(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, chi.URLParam(r, "orgId"), &orgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupsForPrincipalParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", false, false, "uuid", r.URL.Query(), &params.Uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGroupsForPrincipal(w, r, orgId, username, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRolesForGroupsForPrincipal operation middleware
func (siw *ServerInterfaceWrapper) ListRolesForGroupsForPrincipal(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, chi.URLParam(r, "orgId"), &orgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRolesForGroupsForPrincipalParams

	// ------------- Optional query parameter "role_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "role_name", r.URL.Query(), &params.RoleName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_name", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRolesForGroupsForPrincipal(w, r, orgId, username, uuid, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRole operation middleware
func (siw *ServerInterfaceWrapper) ListRole(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, chi.URLParam(r, "orgId"), &orgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRoleParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "display_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "display_name", r.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "display_name", Err: err})
		return
	}

	// ------------- Optional query parameter "system" -------------

	err = runtime.BindQueryParameter("form", true, false, "system", r.URL.Query(), &params.System)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "system", Err: err})
		return
	}

	// ------------- Optional query parameter "name_match" -------------

	err = runtime.BindQueryParameter("form", true, false, "name_match", r.URL.Query(), &params.NameMatch)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name_match", Err: err})
		return
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", r.URL.Query(), &params.Scope)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scope", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	// ------------- Optional query parameter "add_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "add_fields", r.URL.Query(), &params.AddFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "add_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "application" -------------

	err = runtime.BindQueryParameter("form", true, false, "application", r.URL.Query(), &params.Application)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "application", Err: err})
		return
	}

	// ------------- Optional query parameter "permission" -------------

	err = runtime.BindQueryParameter("form", true, false, "permission", r.URL.Query(), &params.Permission)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission", Err: err})
		return
	}

	// ------------- Optional query parameter "external_tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "external_tenant", r.URL.Query(), &params.ExternalTenant)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "external_tenant", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRole(w, r, orgId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/utils/get_org_admin/{org_or_account}/", wrapper.ListOrgAdmins)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/integrations/tenant/", wrapper.ListTenants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/integrations/tenant/{orgId}/groups/", wrapper.ListGroups)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/integrations/tenant/{orgId}/groups/{uuid}/principals/", wrapper.ListPrincipalsForGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/integrations/tenant/{orgId}/groups/{uuid}/roles/", wrapper.ListRolesForGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/integrations/tenant/{orgId}/principal/{username}/groups/", wrapper.ListGroupsForPrincipal)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/integrations/tenant/{orgId}/principal/{username}/groups/{uuid}/roles/", wrapper.ListRolesForGroupsForPrincipal)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/integrations/tenant/{orgId}/roles/", wrapper.ListRole)
	})

	return r
}

type ListOrgAdminsRequestObject struct {
	OrgOrAccount string `json:"org_or_account"`
	Params       ListOrgAdminsParams
}

type ListOrgAdminsResponseObject interface {
	VisitListOrgAdminsResponse(w http.ResponseWriter) error
}

type ListOrgAdmins200JSONResponse OrgAdminPagination

func (response ListOrgAdmins200JSONResponse) VisitListOrgAdminsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListOrgAdmins400Response struct {
}

func (response ListOrgAdmins400Response) VisitListOrgAdminsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListOrgAdmins401Response struct {
}

func (response ListOrgAdmins401Response) VisitListOrgAdminsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListOrgAdmins404JSONResponse Error

func (response ListOrgAdmins404JSONResponse) VisitListOrgAdminsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListOrgAdmins500JSONResponse Error

func (response ListOrgAdmins500JSONResponse) VisitListOrgAdminsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTenantsRequestObject struct {
	Params ListTenantsParams
}

type ListTenantsResponseObject interface {
	VisitListTenantsResponse(w http.ResponseWriter) error
}

type ListTenants200JSONResponse TenantPagination

func (response ListTenants200JSONResponse) VisitListTenantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTenants400Response struct {
}

func (response ListTenants400Response) VisitListTenantsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListTenants401Response struct {
}

func (response ListTenants401Response) VisitListTenantsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListTenants404JSONResponse Error

func (response ListTenants404JSONResponse) VisitListTenantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTenants500JSONResponse Error

func (response ListTenants500JSONResponse) VisitListTenantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupsRequestObject struct {
	OrgId  string `json:"orgId"`
	Params ListGroupsParams
}

type ListGroupsResponseObject interface {
	VisitListGroupsResponse(w http.ResponseWriter) error
}

type ListGroups200JSONResponse GroupPagination

func (response ListGroups200JSONResponse) VisitListGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGroups401Response struct {
}

func (response ListGroups401Response) VisitListGroupsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListGroups403JSONResponse Error403

func (response ListGroups403JSONResponse) VisitListGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListGroups500JSONResponse Error

func (response ListGroups500JSONResponse) VisitListGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPrincipalsForGroupRequestObject struct {
	OrgId  string             `json:"orgId"`
	Uuid   openapi_types.UUID `json:"uuid"`
	Params ListPrincipalsForGroupParams
}

type ListPrincipalsForGroupResponseObject interface {
	VisitListPrincipalsForGroupResponse(w http.ResponseWriter) error
}

type ListPrincipalsForGroup200JSONResponse PrincipalPagination

func (response ListPrincipalsForGroup200JSONResponse) VisitListPrincipalsForGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPrincipalsForGroup400Response struct {
}

func (response ListPrincipalsForGroup400Response) VisitListPrincipalsForGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListPrincipalsForGroup401Response struct {
}

func (response ListPrincipalsForGroup401Response) VisitListPrincipalsForGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListPrincipalsForGroup404JSONResponse Error

func (response ListPrincipalsForGroup404JSONResponse) VisitListPrincipalsForGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListPrincipalsForGroup500JSONResponse Error

func (response ListPrincipalsForGroup500JSONResponse) VisitListPrincipalsForGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRolesForGroupRequestObject struct {
	OrgId  string             `json:"orgId"`
	Uuid   openapi_types.UUID `json:"uuid"`
	Params ListRolesForGroupParams
}

type ListRolesForGroupResponseObject interface {
	VisitListRolesForGroupResponse(w http.ResponseWriter) error
}

type ListRolesForGroup200JSONResponse RolePagination

func (response ListRolesForGroup200JSONResponse) VisitListRolesForGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRolesForGroup401Response struct {
}

func (response ListRolesForGroup401Response) VisitListRolesForGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListRolesForGroup403JSONResponse Error403

func (response ListRolesForGroup403JSONResponse) VisitListRolesForGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListRolesForGroup500JSONResponse Error

func (response ListRolesForGroup500JSONResponse) VisitListRolesForGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupsForPrincipalRequestObject struct {
	OrgId    string `json:"orgId"`
	Username string `json:"username"`
	Params   ListGroupsForPrincipalParams
}

type ListGroupsForPrincipalResponseObject interface {
	VisitListGroupsForPrincipalResponse(w http.ResponseWriter) error
}

type ListGroupsForPrincipal200JSONResponse GroupPagination

func (response ListGroupsForPrincipal200JSONResponse) VisitListGroupsForPrincipalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupsForPrincipal401Response struct {
}

func (response ListGroupsForPrincipal401Response) VisitListGroupsForPrincipalResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListGroupsForPrincipal403JSONResponse Error403

func (response ListGroupsForPrincipal403JSONResponse) VisitListGroupsForPrincipalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupsForPrincipal500JSONResponse Error

func (response ListGroupsForPrincipal500JSONResponse) VisitListGroupsForPrincipalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRolesForGroupsForPrincipalRequestObject struct {
	OrgId    string             `json:"orgId"`
	Username string             `json:"username"`
	Uuid     openapi_types.UUID `json:"uuid"`
	Params   ListRolesForGroupsForPrincipalParams
}

type ListRolesForGroupsForPrincipalResponseObject interface {
	VisitListRolesForGroupsForPrincipalResponse(w http.ResponseWriter) error
}

type ListRolesForGroupsForPrincipal200JSONResponse RolePagination

func (response ListRolesForGroupsForPrincipal200JSONResponse) VisitListRolesForGroupsForPrincipalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRolesForGroupsForPrincipal401Response struct {
}

func (response ListRolesForGroupsForPrincipal401Response) VisitListRolesForGroupsForPrincipalResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListRolesForGroupsForPrincipal403JSONResponse Error403

func (response ListRolesForGroupsForPrincipal403JSONResponse) VisitListRolesForGroupsForPrincipalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListRolesForGroupsForPrincipal500JSONResponse Error

func (response ListRolesForGroupsForPrincipal500JSONResponse) VisitListRolesForGroupsForPrincipalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleRequestObject struct {
	OrgId  string `json:"orgId"`
	Params ListRoleParams
}

type ListRoleResponseObject interface {
	VisitListRoleResponse(w http.ResponseWriter) error
}

type ListRole200JSONResponse RolePagination

func (response ListRole200JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRole401Response struct {
}

func (response ListRole401Response) VisitListRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListRole403JSONResponse Error403

func (response ListRole403JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListRole500JSONResponse Error

func (response ListRole500JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get a list of Org Admins for an account or organization
	// (GET /api/utils/get_org_admin/{org_or_account}/)
	ListOrgAdmins(ctx context.Context, request ListOrgAdminsRequestObject) (ListOrgAdminsResponseObject, error)
	// Get a list of tenants
	// (GET /integrations/tenant/)
	ListTenants(ctx context.Context, request ListTenantsRequestObject) (ListTenantsResponseObject, error)
	// List the groups for a tenant
	// (GET /integrations/tenant/{orgId}/groups/)
	ListGroups(ctx context.Context, request ListGroupsRequestObject) (ListGroupsResponseObject, error)
	// Get a list of principals from a group in a tenant
	// (GET /integrations/tenant/{orgId}/groups/{uuid}/principals/)
	ListPrincipalsForGroup(ctx context.Context, request ListPrincipalsForGroupRequestObject) (ListPrincipalsForGroupResponseObject, error)
	// List the roles for a group in a tenant
	// (GET /integrations/tenant/{orgId}/groups/{uuid}/roles/)
	ListRolesForGroup(ctx context.Context, request ListRolesForGroupRequestObject) (ListRolesForGroupResponseObject, error)
	// List the groups for a principal in a tenant
	// (GET /integrations/tenant/{orgId}/principal/{username}/groups/)
	ListGroupsForPrincipal(ctx context.Context, request ListGroupsForPrincipalRequestObject) (ListGroupsForPrincipalResponseObject, error)
	// List the roles for a group for a principal in a tenant
	// (GET /integrations/tenant/{orgId}/principal/{username}/groups/{uuid}/roles/)
	ListRolesForGroupsForPrincipal(ctx context.Context, request ListRolesForGroupsForPrincipalRequestObject) (ListRolesForGroupsForPrincipalResponseObject, error)
	// List the roles for a tenant
	// (GET /integrations/tenant/{orgId}/roles/)
	ListRole(ctx context.Context, request ListRoleRequestObject) (ListRoleResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListOrgAdmins operation middleware
func (sh *strictHandler) ListOrgAdmins(w http.ResponseWriter, r *http.Request, orgOrAccount string, params ListOrgAdminsParams) {
	var request ListOrgAdminsRequestObject

	request.OrgOrAccount = orgOrAccount
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListOrgAdmins(ctx, request.(ListOrgAdminsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOrgAdmins")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListOrgAdminsResponseObject); ok {
		if err := validResponse.VisitListOrgAdminsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTenants operation middleware
func (sh *strictHandler) ListTenants(w http.ResponseWriter, r *http.Request, params ListTenantsParams) {
	var request ListTenantsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTenants(ctx, request.(ListTenantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTenants")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTenantsResponseObject); ok {
		if err := validResponse.VisitListTenantsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListGroups operation middleware
func (sh *strictHandler) ListGroups(w http.ResponseWriter, r *http.Request, orgId string, params ListGroupsParams) {
	var request ListGroupsRequestObject

	request.OrgId = orgId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListGroups(ctx, request.(ListGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGroups")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListGroupsResponseObject); ok {
		if err := validResponse.VisitListGroupsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPrincipalsForGroup operation middleware
func (sh *strictHandler) ListPrincipalsForGroup(w http.ResponseWriter, r *http.Request, orgId string, uuid openapi_types.UUID, params ListPrincipalsForGroupParams) {
	var request ListPrincipalsForGroupRequestObject

	request.OrgId = orgId
	request.Uuid = uuid
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPrincipalsForGroup(ctx, request.(ListPrincipalsForGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPrincipalsForGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPrincipalsForGroupResponseObject); ok {
		if err := validResponse.VisitListPrincipalsForGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRolesForGroup operation middleware
func (sh *strictHandler) ListRolesForGroup(w http.ResponseWriter, r *http.Request, orgId string, uuid openapi_types.UUID, params ListRolesForGroupParams) {
	var request ListRolesForGroupRequestObject

	request.OrgId = orgId
	request.Uuid = uuid
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRolesForGroup(ctx, request.(ListRolesForGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRolesForGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRolesForGroupResponseObject); ok {
		if err := validResponse.VisitListRolesForGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListGroupsForPrincipal operation middleware
func (sh *strictHandler) ListGroupsForPrincipal(w http.ResponseWriter, r *http.Request, orgId string, username string, params ListGroupsForPrincipalParams) {
	var request ListGroupsForPrincipalRequestObject

	request.OrgId = orgId
	request.Username = username
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListGroupsForPrincipal(ctx, request.(ListGroupsForPrincipalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGroupsForPrincipal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListGroupsForPrincipalResponseObject); ok {
		if err := validResponse.VisitListGroupsForPrincipalResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRolesForGroupsForPrincipal operation middleware
func (sh *strictHandler) ListRolesForGroupsForPrincipal(w http.ResponseWriter, r *http.Request, orgId string, username string, uuid openapi_types.UUID, params ListRolesForGroupsForPrincipalParams) {
	var request ListRolesForGroupsForPrincipalRequestObject

	request.OrgId = orgId
	request.Username = username
	request.Uuid = uuid
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRolesForGroupsForPrincipal(ctx, request.(ListRolesForGroupsForPrincipalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRolesForGroupsForPrincipal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRolesForGroupsForPrincipalResponseObject); ok {
		if err := validResponse.VisitListRolesForGroupsForPrincipalResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRole operation middleware
func (sh *strictHandler) ListRole(w http.ResponseWriter, r *http.Request, orgId string, params ListRoleParams) {
	var request ListRoleRequestObject

	request.OrgId = orgId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRole(ctx, request.(ListRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRoleResponseObject); ok {
		if err := validResponse.VisitListRoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
